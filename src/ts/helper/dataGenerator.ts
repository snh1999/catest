import { faker } from "@faker-js/faker";

// const fakerCommands = [
//     `() => faker.string.alpha({ length: { min: 7, max: 15 } })`,
//     `() => faker.string.alpha({ casing: "lower", length: { min: 7, max: 15 } })`,
//     `() => faker.string.alpha({ casing: "upper", length: { min: 7, max: 15 } })`,
//     `() => faker.string.alphanumeric({ length: { min: 7, max: 15 } })`,
//     `() => faker.string.alphanumeric({ casing: "lower", length: { min: 7, max: 15 } })`,
//     `() => faker.string.alphanumeric({ casing: "upper", length: { min: 7, max: 15 } })`,
//     `() => faker.string.nanoid()`,
//     `() => faker.string.sample()`,
//     `() => faker.string.uuid()`,
//     `() => faker.internet.userName()`,
//     `() => faker.internet.color()`,
//     `() => faker.internet.email()`,
//     `() => faker.internet.url()`,
//     `() => faker.internet.password()`,
//     `() => faker.internet.mac()`,
//     `() => faker.internet.ipv4()`,
//     `() => faker.internet.ipv6()`,
//     `() => faker.lorem.paragraph()`,
//     `() => faker.lorem.paragraphs()`,
//     `() => faker.lorem.slug()`,
//     `() => faker.lorem.sentence()`,
//     `() => faker.number.int()`,
//     `() => faker.number.bigInt()`,
//     `() => faker.number.binary()`,
//     `() => faker.number.hex()`,
//     `() => faker.number.octal()`,
//     `() => faker.number.float()`,
//     `() => faker.location.zipCode()`,
//     `() => faker.location.country()`,
//     `() => faker.location.latitude()`,
//     `() => faker.location.longitude()`,
//     `() => faker.location.nearbyGPSCoordinate()`,
//     `() => faker.location.timeZone()`,
//     `() => faker.phone.imei()`,
//     `() => faker.phone.number()`,
//     `() => faker.person.bio()`,
//     `() => faker.person.firstName()`,
//     `() => faker.person.fullName()`,
//     `() => faker.person.sex()`,
//     `() => faker.person.jobTitle()`,
//     `() => faker.person.prefix()`,
//     `() => faker.person.sexType()`,
//     `() => faker.person.suffix()`,
//     `() => faker.person.zodiacSign()`,
//     `() => faker.date.anytime()`,
//     `() => faker.date.future()`,
//     `() => faker.date.past()`,
//     `() => faker.date.birthdate()`,
//     `() => faker.date.month()`,
//     `() => faker.date.weekday()`,
// ];

const DataGenObj: Record<string, any> = {
    "string (alpha)": () => faker.string.alpha({ length: { min: 7, max: 15 } }),
    "string (alpha, lowercase)": () => faker.string.alpha({ casing: "lower", length: { min: 7, max: 15 } }),
    "string (alpha, uppercase)": () => faker.string.alpha({ casing: "upper", length: { min: 7, max: 15 } }),
    "string (alphanumeric)": () => faker.string.alphanumeric({ length: { min: 7, max: 15 } }),
    "string (alphanumeric, lowercase)": () =>
        faker.string.alphanumeric({ casing: "lower", length: { min: 7, max: 15 } }),
    "string (alphanumeric, uppercase)": () =>
        faker.string.alphanumeric({ casing: "upper", length: { min: 7, max: 15 } }),
    nanoid: () => faker.string.nanoid(),
    "sample string": () => faker.string.sample(),
    uuid: () => faker.string.uuid(),
    userName: () => faker.internet.userName(),
    color: () => faker.internet.color(),
    email: () => faker.internet.email(),
    url: () => faker.internet.url(),
    password: () => faker.internet.password(),
    mac: () => faker.internet.mac(),
    ipv4: () => faker.internet.ipv4(),
    ipv6: () => faker.internet.ipv6(),
    paragraph: () => faker.lorem.paragraph(),
    post: () => faker.lorem.paragraphs(),
    slug: () => faker.lorem.slug(),
    sentence: () => faker.lorem.sentence(),
    "Number (Integer)": () => faker.number.int(),
    bigInt: () => faker.number.bigInt(),
    binary: () => faker.number.binary(),
    hex: () => faker.number.hex(),
    octal: () => faker.number.octal(),
    "Number (Float)": () => faker.number.float(),
    zipCode: () => faker.location.zipCode(),
    country: () => faker.location.country(),
    latitude: () => faker.location.latitude(),
    longitude: () => faker.location.longitude(),
    nearbyGPSCoordinate: () => faker.location.nearbyGPSCoordinate(),
    timeZone: () => faker.location.timeZone(),
    imei: () => faker.phone.imei(),
    "Phone number": () => faker.phone.number(),
    bio: () => faker.person.bio(),
    firstName: () => faker.person.firstName(),
    fullName: () => faker.person.fullName(),
    sex: () => faker.person.sex(),
    jobTitle: () => faker.person.jobTitle(),
    prefix: () => faker.person.prefix(),
    sexType: () => faker.person.sexType(),
    suffix: () => faker.person.suffix(),
    zodiacSign: () => faker.person.zodiacSign(),
    anytime: () => faker.date.anytime(),
    future: () => faker.date.future(),
    past: () => faker.date.past(),
    birthdate: () => faker.date.birthdate(),
    month: () => faker.date.month(),
    weekday: () => faker.date.weekday(),
};

export default function getFakeData(newValue: string | null): any {
    return newValue && newValue in DataGenObj ? DataGenObj[newValue]() : "";
}
